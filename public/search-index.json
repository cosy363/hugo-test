[{"content":"활용 가이드 OPMATE 사용자 튜토리얼\n에이전트 설치 설치/제거 가이드 프로그램 설치 리눅스용 에이전트 설치 윈도우즈용 에이전트 설치 프로그램 제거 리눅스용 에이전트 제거 윈도우즈용 에이전트 제거 다운로드 준비중 지원 운영체제 Linux RHEL(CentOS) 8 (x86_64bit / arm_64bit) RHEL(CentOS) 7 (x86_64bit) RHEL(CentOS) 6 (x86_64bit) RHEL(CentOS) 5 (x86_64bit) Amazon Linux 2 (x86_64bit / arm_64bit) SUSE Linux Enterprise Server 15 SP2 (x86_64bit / arm_64bit) Ubuntu Server 20.04 (x86_64bit / arm_64bit) Debian 10 (x86_64bit / arm_64bit) Oracle Linux 8.3 (x86_64bit)\tWindows Windows Server 2022 (x86_64bit) Windows Server 2019 (x86_64bit) Windows Server 2016 (x86_64bit) Windows Server 2012 (x86_64bit) Windows Server 2008 (x86_64bit) ","date":"2023-08-21","id":0,"permalink":"/docs/v2.0/","summary":"\u003ch2 id=\"활용-가이드\"\u003e활용 가이드\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"tutorial\"\u003eOPMATE 사용자 튜토리얼\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"에이전트-설치\"\u003e에이전트 설치\u003c/h2\u003e\n\u003ch3 id=\"설치제거-가이드\"\u003e설치/제거 가이드\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e프로그램 설치\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"AgentInstall#Linux\"\u003e리눅스용 에이전트 설치\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"AgentInstall#Windows\"\u003e윈도우즈용 에이전트 설치\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e프로그램 제거\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"AgentUninstall#Linux\"\u003e리눅스용 에이전트 제거\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"AgentUninstall#Windows\"\u003e윈도우즈용 에이전트 제거\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"다운로드\"\u003e다운로드\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e준비중\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!--\n**주의** : **마스터의 버전이 V2.0**인 경우에만 아래 에이전트를 설치하시기 바랍니다.\n\n- **OPMATE Agent _v2.0.004_**\n  - [opma-installer-2.0.004-linux-20211230.tar.gz](https://github.com/opmate/opmate.github.io/releases/download/OPMATE-AGENT-v2.0.004/opma-installer-2.0.004-linux-20211230.tar.gz)\n  - [opma-installer-2.0.004-windows-20211230.exe](https://github.com/opmate/opmate.github.io/releases/download/OPMATE-AGENT-v2.0.004/opma-installer-2.0.004-windows-20211230.exe)\n--\u003e\n\u003ch3 id=\"지원-운영체제\"\u003e지원 운영체제\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eLinux\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eRHEL(CentOS) 8 (x86_64bit / arm_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eRHEL(CentOS) 7 (x86_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eRHEL(CentOS) 6 (x86_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eRHEL(CentOS) 5 (x86_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eAmazon Linux 2 (x86_64bit / arm_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eSUSE Linux Enterprise Server 15 SP2 (x86_64bit / arm_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eUbuntu Server 20.04 (x86_64bit / arm_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eDebian 10 (x86_64bit / arm_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eOracle Linux 8.3 (x86_64bit)\t\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eWindows\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eWindows Server 2022 (x86_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eWindows Server 2019 (x86_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eWindows Server 2016 (x86_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eWindows Server 2012 (x86_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ccode\u003eWindows Server 2008 (x86_64bit)\u003c/code\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","tags":[],"title":"OPMATE v2.0"},{"content":"Well-thought-through product announcements will help increase feature awareness and engage users with new functionality. Just like sharing your public roadmap, it\u0026rsquo;s also a great way to let potential customers see that you\u0026rsquo;re constantly improving.\nFurther reading Read How to announce product updates and features ","date":"2023-09-07","id":1,"permalink":"/blog/example-post/","summary":"You can use blog posts for announcing product updates and features.","tags":[],"title":"Example Post"},{"content":"","date":"2023-09-07","id":2,"permalink":"/blog/","summary":"","tags":[],"title":"Blog"},{"content":"\nOPMATE란? IT 인프라 운영 시 대량 단순 반복 작업을 자동으로 수행할 수 있는 운영 자동화 플랫폼입니다.\n이렇게 활용하세요 한 번의 명령으로 모든 서버의 디스크 사용률을 조사해 보세요.\n$ opmate execution run -ts diskusage\n소프트웨어 패치 파일을 일괄로 배포하세요.\n$ opmate execution run -ts downpatch -ag 'patch.tar.gz'\nVersions ","date":"2023-09-07","id":3,"permalink":"/","summary":"\u003cbr\u003e\r\n\u003ch2 id=\"opmate란\"\u003eOPMATE란?\u003c/h2\u003e\n\u003cp\u003eIT 인프라 운영 시 대량 단순 반복 작업을 자동으로 수행할 수 있는 \u003cstrong\u003e운영 자동화 플랫폼\u003c/strong\u003e입니다.\u003c/p\u003e\n\u003cbr\u003e\r\n\u003ch3 id=\"이렇게-활용하세요\"\u003e이렇게 활용하세요\u003c/h3\u003e\n\u003cp\u003e\u003cem\u003e한 번의 명령으로 모든 서버의 디스크 사용률을 조사해 보세요.\u003c/em\u003e\u003c/p\u003e","tags":[],"title":""},{"content":"","date":"2023-09-07","id":4,"permalink":"/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"\nOPMATE란? IT 인프라 운영 시 대량 단순 반복 작업을 자동으로 수행할 수 있는 운영 자동화 플랫폼입니다.\n이렇게 활용하세요 한 번의 명령으로 모든 서버의 디스크 사용률을 조사해 보세요.\n$ opmate execution run -ts diskusage\n소프트웨어 패치 파일을 일괄로 배포하세요.\n$ opmate execution run -ts downpatch -ag 'patch.tar.gz'\nVersions ","date":"2023-08-21","id":5,"permalink":"/docs/","summary":"\u003cbr\u003e\n\u003ch2 id=\"opmate란\"\u003eOPMATE란?\u003c/h2\u003e\n\u003cp\u003eIT 인프라 운영 시 대량 단순 반복 작업을 자동으로 수행할 수 있는 \u003cstrong\u003e운영 자동화 플랫폼\u003c/strong\u003e입니다.\u003c/p\u003e\n\u003cbr\u003e\n\u003ch3 id=\"이렇게-활용하세요\"\u003e이렇게 활용하세요\u003c/h3\u003e\n\u003cp\u003e\u003cem\u003e한 번의 명령으로 모든 서버의 디스크 사용률을 조사해 보세요.\u003c/em\u003e\u003c/p\u003e","tags":[],"title":""},{"content":"","date":"2023-08-21","id":6,"permalink":"/docs/v2.0/%EC%97%90%EC%9D%B4%EC%A0%84%ED%8A%B8-%EC%84%A4%EC%B9%98/","summary":"","tags":[],"title":"에이전트 설치"},{"content":"","date":"2023-08-21","id":7,"permalink":"/docs/v2.0/%EC%97%90%EC%9D%B4%EC%A0%84%ED%8A%B8-%EC%A0%9C%EA%B1%B0/","summary":"","tags":[],"title":"에이전트 제거"},{"content":" OPMATE CLI 명령어의 형식은 다음과 같습니다:\n$ opmate \u0026lt;subject\u0026gt; \u0026lt;action\u0026gt; [\u0026lt;parameter\u0026gt;]\r또한, 각각의 명령어의 활용법이 궁금하다면,\n명령어 맨 뒤에 -h나 --help를 붙여 사용 가능한 명령어와 매뉴얼을 조회할 수 있습니다.\n# OPMATE CLI 가용 Subject 조회 $ opmate -h # OPMATE CLI 매뉴얼 조회 $ opmate --help # Subject에서 사용 가능한 Action 조회 $ opmate \u0026lt;subject\u0026gt; -h # Subject 매뉴얼 조회 $ opmate \u0026lt;subject\u0026gt; --help # Action에서 사용되는 파라미터 조회 $ opmate \u0026lt;subject\u0026gt; \u0026lt;action\u0026gt; -h # Action 매뉴얼 조회 $ opmate \u0026lt;subject\u0026gt; \u0026lt;action\u0026gt; --help\ropmate user login이란 명령어를 예시로 들어볼까요?\n명령어 맨 뒤에 -h를 추가로 입력하여 opmate user login의 사용법을 알아봅니다.\n$ opmate user login -h usage: opmate user login -id \u0026lt;user-id\u0026gt; parameters: -id,--id \u0026lt;user-id\u0026gt; 사용자 ID\r이 명령어를 사용하려면 사용자 ID(-id)라는 파라미터를 입력해야 함을 알 수 있습니다.\n목차 / 다음페이지\n","date":"0001-01-01","id":8,"permalink":"/docs/v2.0/tutorial/1.-cli-%EB%AA%85%EB%A0%B9%EC%96%B4/","summary":"\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eOPMATE CLI 명령어\u003c/strong\u003e의 형식은 다음과 같습니다:\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ opmate \u0026lt;subject\u0026gt; \u0026lt;action\u0026gt; [\u0026lt;parameter\u0026gt;]\u003c/code\u003e\u003c/pre\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e또한, 각각의 명령어의 활용법이 궁금하다면,\u003cbr\u003e\n명령어 맨 뒤에 \u003ccode\u003e-h\u003c/code\u003e나 \u003ccode\u003e--help\u003c/code\u003e를 붙여 사용 가능한 명령어와 매뉴얼을 조회할 수 있습니다.\u003c/p\u003e","tags":[],"title":"1. CLI 명령어"},{"content":" OPMATE에 액세스하기 위해서는 인증이 필요합니다.\n본 튜토리얼에선 \u0026lsquo;gildong\u0026rsquo; 명의로 인증을 진행하겠습니다.\nopmate user login으로 로그인합니다.\n$ opmate user login -id gildong \u0026gt; Requesting https://127.0.0.1:8443/opmate \u0026gt; Enter password: \u0026gt; Last login: 비밀번호를 입력하면 \u0026lsquo;Last Login\u0026rsquo;이 표시되며, 정상적으로 로그인되었음을 확인할 수 있습니다.\n이전페이지 / 목차 / 다음페이지\n","date":"0001-01-01","id":9,"permalink":"/docs/v2.0/tutorial/2.-%EC%82%AC%EC%9A%A9%EC%9E%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8/","summary":"\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eOPMATE\u003c/strong\u003e에 액세스하기 위해서는 인증이 필요합니다.\u003cbr\u003e\n본 튜토리얼에선 \u003cspan style=\"color:#0000FF\"\u003e\u0026lsquo;gildong\u0026rsquo;\u003c/span\u003e 명의로 인증을 진행하겠습니다.\u003c/p\u003e\n\u003cp\u003e\u003cspan\u003e\u003cinline style=\"color:#ff4500\"\u003eopmate user login\u003c/inline\u003e으로 로그인합니다.\u003c/span\u003e\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ opmate user login -id gildong\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026gt; Requesting https://127.0.0.1:8443/opmate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026gt; Enter password: \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026gt; Last login: \u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003cspan\u003e비밀번호를 입력하면 \u0026lsquo;Last Login\u0026rsquo;이 표시되며, 정상적으로 로그인되었음을 확인할 수 있습니다.\u003c/span\u003e\u003c/p\u003e","tags":[],"title":"2. 사용자 로그인"},{"content":" **노드(Node)**는 자동화 작업의 대상이 되는 호스트(Host)입니다.\n에이전트를 호스트에 설치하면, 해당 호스트가 마스터 서버에 노드로 등록됩니다.\n그러면 사용 가능한 노드가 어떤 것들이 있는지 확인해 보겠습니다.\n우선 opmate node list로 전체 노드 목록을 조회합니다.\n$ opmate node list \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong +--------------------------------------+-----------------+---------------+------------+-----------+-------------------------+ | NODE-SESSION-ID | HOSTNAME | REMOTE-ADDR | OS-TYPE | AGENT-VER | HEARTBEAT | +--------------------------------------+-----------------+---------------+------------+-----------+-------------------------+ | 01d5020e-dc5f-4744-ad9c-22f23727db76 | DB-DEV-LINUX | 172.31.3.147 | Linux | 2.0.020 | 2024-03-20 11:05:59 KST | | 98a318fd-f51e-4222-a3c0-2f58e55b5822 | DB-DEV-WIN | 172.31.9.20 | Windows_NT | 2.0.020 | 2024-03-20 11:05:39 KST | | e8167cfe-a696-4733-b5a0-8de5823f5a95 | DB-PROD-LINUX | 172.31.8.148 | Linux | 2.0.020 | 2024-03-20 11:05:22 KST | | 9510d4b6-4269-4b00-a2be-cb408c6e668d | APP-DEV-LINUX | 172.31.8.75 | Linux | 2.0.020 | 2024-03-20 11:05:51 KST | +--------------------------------------+-----------------+---------------+------------+-----------+-------------------------+ \u0026gt; ROWS COUNT : 4/4\rOS-TYPE을 기준으로 윈도우 노드가 1개, 리눅스 노드가 3개 - 총 4개의 노드가 조회됩니다.\n이 중 HOSTNAME이 \u0026lsquo;DB-PROD-LINUX\u0026rsquo;인 노드를 좀 더 자세히 살펴볼까요?\nopmate node view로 노드의 상세 정보를 조회할 수 있습니다.\n$ opmate node view -id e8167cfe-a696-4733-b5a0-8de5823f5a95 \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong +-----------------------+---------------------------------------------------------+ | FIELD | VALUE | +-----------------------+---------------------------------------------------------+ | NODE-SESSION-ID | e8167cfe-a696-4733-b5a0-8de5823f5a95 | | SESSION-ESTABLISHMENT | 2024-03-18 15:15:51 KST | | SESSION-STATUS | normal | | AGENT-VERSION | 2.0.020.Linux.x86_64.20240216.1 | | REMOTE-ADDRESS | 172.31.8.148 | | HEARTBEAT | 2024-03-20 11:15:22 KST | | HOSTNAME | DB-PROD-LINUX | | OS-TYPE | Linux | | OS-NAME | Red Hat Enterprise Linux 9.3 (Plow) | | OS-VERSION | 5.14.0-362.18.1.el9_3.x86_64 | +-----------------------+---------------------------------------------------------+ | CSP-RESOURCE-ID | i-099ab766133afbf23 | | CSP-TAG | CT.Environment=Production | | | CT.Name=DB-PROD-RHEL | | | CT.ResourceType=AWS | +-----------------------+--------------------------------------------------------- | EXT-TAG | | +-----------------------+---------------------------------------------------------+\r노드 목록에서 조회할 수 없었던 노드의 추가 정보(OS명, 세션 정보 등)를 확인할 수 있습니다.\n또한 호스트가 클라우드에 있다면, CSP가 제공하는 메타데이터인 Resource ID와 Tag를 조회할 수 있습니다.\n이러한 데이터를 기반으로 어떤 노드가 자동화 작업의 대상이 되는지 지정할 수 있습니다.\n이전페이지 / 목차 / 다음페이지\n","date":"0001-01-01","id":10,"permalink":"/docs/v2.0/tutorial/3.-%EB%85%B8%EB%93%9C-%EC%A1%B0%ED%9A%8C/","summary":"\u003chr\u003e\n\u003cp\u003e**노드(Node)**는 자동화 작업의 대상이 되는 호스트(Host)입니다.\u003cbr\u003e\n에이전트를 호스트에 설치하면, 해당 호스트가 마스터 서버에 노드로 등록됩니다.\u003c/p\u003e\n\u003cp\u003e그러면 사용 가능한 노드가 어떤 것들이 있는지 확인해 보겠습니다.\u003cbr\u003e\n\u003cspan\u003e우선 \u003cinline style=\"color:#ff4500\"\u003eopmate node list\u003c/inline\u003e로 전체 노드 목록을 조회합니다.\u003c/span\u003e\u003c/p\u003e","tags":[],"title":"3. 노드 조회"},{"content":" **태스크(Task)**는 사전 정의된 자동화 작업입니다.\n에이전트가 설치된 노드에 명령을 실행하기 위해선 태스크를 정의해야 합니다.\n본 튜토리얼에서 여러분은 DB 운영자인 \u0026lsquo;gildong\u0026rsquo;으로서 각 호스트의 가동 시간(uptime)을 조회하는 태스크를 생성할 것입니다.\n그럼 다음과 같이 태스크를 생성해 보겠습니다:\n스크립트 생성\n태스크 정의 : opmate task gentmpl\n태스크 생성 : opmate task create\n태스크 발행 : opmate task publish\n스크립트 생성 우선 호스트에서 실행될 스크립트 파일을 작성합니다.\n파일명은 task_uptime.sh로 저장합니다.\n#!/bin/bash uptime exit 0\r태스크 정의 태스크를 생성할 때는 스크립트 외에도 스크립트를 누가, 언제, 어디서, 어떻게 실행할 건지 정의해야 됩니다.\n이 때 사용되는 파일이 **태스크 정의서 파일(Task Definition Form, TDF)**입니다.\nopmate task gentmpl로 태스크 정의서의 템플릿 파일을 생성합니다.\n$ opmate task gentmpl -id task_uptime \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong \u0026gt; template has been saved to \u0026#39;task_uptime.tdf\u0026#39;\r-id 파라미터에 적은 파일명으로 TDF 템플릿 파일이 생성됩니다.\n이 파일을 통해 태스크 정보, 타깃 노드, 실행 스케줄, 사용자 권한 등을 설정할 수 있습니다.\n주석을 참조하면서 템플릿 파일을 다음과 같이 수정합니다:\n--- id: task_uptime owner: gildong script-account: root description: 서버 가동 시간 조회 target: - node-set: OS-TYPE:\u0026#34;^Linux$\u0026#34; description: OS가 Linux인 모든 노드 대상으로 Task 실행 ...\rid으로 태스크의 ID값을 지정할 수 있습니다.\n또한 target으로 태스크의 실행 대상이 되는 노드를 지정할 수 있습니다.\nnode-set을 추가하면서 정규 표현식으로 노드를 지정하면 됩니다.\n본 예시에선 OS-TYPE:\u0026quot;^Linux$\u0026quot;이란 표현식으로 노드를 지정했습니다.\n여기서 OS-TYPE은 노드의 필드 중 하나입니다.\nHOSTNAME, CSP-TAG 등의 다양한 필드를 조합해 노드를 필터링할 수 있습니다.\n\u0026quot;^Linux$\u0026quot;는 문자열 값이 정확히 \u0026ldquo;Linux\u0026quot;와 일치한다는 뜻입니다.\n캐럿 기호 ^는 텍스트의 시작, 달러 기호 $은 텍스트의 끝을 나타냅니다.\n태스크 생성 opmate task create로 태스크를 생성합니다.\n앞서 작성한 스크립트 파일과 TDF 파일을 활용합니다.\n$ opmate task create -tf task_uptime.tdf -sf task_uptime.sh \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong \u0026gt; task_uptime has been created successfully.\r이 때 태스크는 수정 가능한 상태로 Master 서버에 등록됩니다.\n태스크 발행 수정을 거쳐 태스크의 최종본이 확정되면 태스크를 발행해 실행 가능한 상태로 만듭니다.\nopmate task publish로 태스크를 발행합니다.\n$ opmate task publish -id task_uptime \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong \u0026gt; task_uptime has been published successfully.\r이전페이지 / 목차 / 다음페이지\n","date":"0001-01-01","id":11,"permalink":"/docs/v2.0/tutorial/4.-%ED%83%9C%EC%8A%A4%ED%81%AC-%EC%83%9D%EC%84%B1/","summary":"\u003chr\u003e\n\u003cp\u003e**태스크(Task)**는 사전 정의된 자동화 작업입니다.\u003cbr\u003e\n에이전트가 설치된 노드에 명령을 실행하기 위해선 태스크를 정의해야 합니다.\u003c/p\u003e\n\u003cp\u003e본 튜토리얼에서 여러분은 DB 운영자인 \u003cspan style=\"color:#0000FF\"\u003e\u0026lsquo;gildong\u0026rsquo;\u003c/span\u003e으로서 각 호스트의 가동 시간(uptime)을 조회하는 태스크를 생성할 것입니다.\u003c/p\u003e","tags":[],"title":"4. 태스크 생성"},{"content":" 태스크가 정상적으로 발행됐다면, 태스크를 실행(Execution) 할 수 있습니다.\n태스크가 실행되면 실행 인스턴스가 만들어지고, 실행 인스턴스별로 실행 ID를 부여받게 됩니다.\n태스크 실행 opmate execution run으로 이전 단계에서 발행한 태스크를 실행할 수 있습니다.\n$ opmate execution run -ts task_uptime \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong \u0026gt; execution #1 has been created successfully.\r\u0026lsquo;Execution #1\u0026lsquo;으로 태스크가 실행된 것을 확인할 수 있습니다. 이때 \u0026lsquo;1\u0026rsquo; 은 해당 실행의 실행 ID입니다. Execution 결과 조회 opmate execution listnode로 태스크 실행 결과 목록을 조회합니다.\n$ opmate execution listnode -id 1 \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong +--------------------------------------+-----------------+---------------+-----------+---------+ | NODE-SESSION-ID | HOSTNAME | REMOTE-ADDR | STATUS | RESULT | +--------------------------------------+-----------------+---------------+-----------+---------+ | 9510d4b6-4269-4b00-a2be-cb408c6e668d | APP-DEV-LINUX | 172.31.8.75 | stopped | n/a | | 01d5020e-dc5f-4744-ad9c-22f23727db76 | DB-DEV-LINUX | 172.31.3.147 | completed | success | | ea3117fe-2c16-4533-afb7-8b0fe7685251 | DB-PROD-LINUX | 172.31.8.148 | completed | success | +--------------------------------------+-----------------+---------------+-----------+---------+ \u0026gt; ROWS COUNT : 3/3\r모든 리눅스 노드를 대상으로 태스크를 실행했기에 총 3개의 노드가 조회됩니다.\n여기서 STATUS가 completed라면 태스크가 정상적으로 실행 완료되었다는 뜻입니다.\nSTATUS가 requesting이나 running라면 태스크가 실행 중이라는 뜻으로 잠시 대기합니다.\n만약 STATUS가 stopped라면 모종의 이유로 태스크가 중지되었다는 뜻입니다.\n실행 완료된 노드 중 하나인 \u0026lsquo;DB-DEV-LINUX\u0026rsquo;를 opmate execution viewnode로 상세 조회해 보겠습니다.\n$ opmate execution viewnode -id 1 -nd 01d5020e-dc5f-4744-ad9c-22f23727db76 \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong +-----------------+--------------------------------------+ | FIELD | VALUE | +-----------------+--------------------------------------+ | NODE-SESSION-ID | 01d5020e-dc5f-4744-ad9c-22f23727db76 | | HOSTNAME | DB-DEV-LINUX | | REMOTE-ADDRESS | 172.31.3.147 | | ACCOUNT | root | | STATUS | completed | | RESULT | success | | EXIT-NUM | 0 | | FORCE-STOP | n/a | | START-DATE | 2024-03-20 16:14:19 KST | | END-DATE | 2024-03-20 16:14:20 KST | +-----------------+--------------------------------------+ [STDOUT] 07:14:20 up 4:45, 0 users, load average: 0.05, 0.03, 0.01 [STDERR] No content.\r표준 출력(STDOUT)으로 스크립트(uptime)의 결과가 출력되는 것을 확인할 수 있습니다.\n그렇다면 이번엔 STATUS가 stopped였던 \u0026lsquo;APP-DEV-LINUX\u0026rsquo; 노드를 상세 조회해 볼까요?\n$ opmate execution viewnode -id 1 -nd 9510d4b6-4269-4b00-a2be-cb408c6e668d \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong +-----------------+--------------------------------------+ | FIELD | VALUE | +-----------------+--------------------------------------+ | NODE-SESSION-ID | 9510d4b6-4269-4b00-a2be-cb408c6e668d | | HOSTNAME | APP-DEV-LINUX | | REMOTE-ADDRESS | 172.31.8.75 | | ACCOUNT | root | | STATUS | stopped : no role of node | | RESULT | n/a | | EXIT-NUM | | | FORCE-STOP | n/a | | START-DATE | | | END-DATE | | +-----------------+--------------------------------------+ [STDOUT] No content. [STDERR] No content.\r\u0026lsquo;no role of node\u0026rsquo;라는 메시지와 함께 태스크 실행이 중단된 것을 확인할 수 있습니다.\n그러면 role이란 과연 무엇이고, 왜 태스크 실행이 중단되었을까요?\n권한 확인 **역할(Role)**은 노드에서의 태스크 실행 권한입니다.\n태스크의 소유자(Owner)가 노드를 태스크의 대상으로 지정할 때는 반드시 지정한 노드에 대한 역할을 가지고 있어야 합니다.\n그럼 \u0026lsquo;gildong\u0026rsquo; 이 어떤 역할을 가지고 있는 지 조회해 보겠습니다.\n우선 opmate role list로 전체 역할 목록을 조회합니다.\n$ opmate role list \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong +-------------+------------+ | ID | NAME | +-------------+------------+ | ro-app-dev | APP 개발자 | | ro-db-admin | DB 관리자 | | ro-db-dev | DB 개발자 | +-------------+------------+ \u0026gt;ROWS COUNT : 3/3\r총 3개의 역할이 조회됩니다.\n다시 한번 상기하자면, \u0026lsquo;gildong\u0026rsquo;은 DB 관리자입니다.\n따라서 opmate role view로 \u0026lsquo;DB 관리자\u0026rsquo; 역할을 상세 조회해 보겠습니다.\n$ opmate role view -id ro-db-admin \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong +----------+------------------------------------+ | FIELD | VALUE | +----------+------------------------------------+ | ID | ro-db-admin | | NAME | DB 관리자 | | CREATED | 2024-03-20 16:02:14 KST BY admin | | UPDATED | 2024-03-20 16:14:04 KST BY admin | +----------+------------------------------------+ | NODE-SET | #1. HOSTNAME:\u0026#34;^DB-\u0026#34; AS * # DB 서버 | +----------+------------------------------------+ | USER | admin(관리자) | | | gildong(홍길동) | +----------+------------------------------------+\rUSER는 역할을 사용할 수 있는 사용자입니다. 예시에선 \u0026lsquo;admin\u0026rsquo;과 \u0026lsquo;gildong\u0026rsquo; 이 해당합니다.\nNODE-SET은 역할을 가진 사용자가 사용할 수 있는 노드입니다. 정규 표현식으로 지정되어 있습니다.\n예시에서는 호스트명이 \u0026lsquo;DB-\u0026lsquo;로 시작되는 모든 노드가 지정되어 있는데요,\nstopped 상태였던 \u0026lsquo;APP-DEV-LINUX\u0026rsquo; 노드는 \u0026lsquo;DB-\u0026lsquo;로 시작되는 노드가 아니므로,\n\u0026lsquo;DB 관리자\u0026rsquo; 역할만 가지고 있는 \u0026lsquo;gildong\u0026rsquo; 에게는 해당 노드에 대한 권한, 즉 역할이 없습니다.\n따라서 해당 노드를 제외하여, DB 노드에서만 태스크를 실행하고 싶다면\n4장: 태스크 정의에서 만들었던 태스크 정의서(test_uptime.tdf)를 다음과 같이 수정해야 합니다:\n--- id: task_uptime owner: gildong publisher: gildong script-account: root description: 서버 가동 시간 조회 target: - node-set: HOSTNAME:\u0026#34;^DB-\u0026#34;, OS-TYPE:\u0026#34;^Linux$\u0026#34; description: OS가 Linux인 모든 DB 대상으로 Task 실행\rnode-set에 HOSTNAME: \u0026ldquo;^DB-\u0026quot;라는 표현식을 추가했습니다.\n이는 HOSTNAME에 \u0026lsquo;DB-\u0026lsquo;라는 식별자로 시작하는 노드만을 포함한다는 뜻입니다.\n수정 후 task_uptime 태스크를 수정(opmate task edit) 및 발행(opmate task publish)하고,\\ 실행(opmate execution run)까지 완료하면 태스크 실행 결과가 다음과 같이 변경됩니다: $ opmate execution listnode -id 2 \u0026gt; Requesting https://127.0.0.1:8443/opmate;user=gildong +--------------------------------------+-----------------+---------------+-----------+---------+ | NODE-SESSION-ID | HOSTNAME | REMOTE-ADDR | STATUS | RESULT | +--------------------------------------+-----------------+---------------+-----------+---------+ | 01d5020e-dc5f-4744-ad9c-22f23727db76 | DB-DEV-LINUX | 172.31.3.147 | completed | success | | ea3117fe-2c16-4533-afb7-8b0fe7685251 | DB-PROD-LINUX | 172.31.3.148 | completed | success | +--------------------------------------+-----------------+---------------+-----------+---------+ \u0026gt; ROWS COUNT : 2/2\r\u0026lsquo;APP-DEV-LINUX\u0026rsquo; 노드가 실행 목록에서 제외된 것을 확인할 수 있습니다.\n이전페이지 / 목차 / 다음페이지\n","date":"0001-01-01","id":12,"permalink":"/docs/v2.0/tutorial/5.-%ED%83%9C%EC%8A%A4%ED%81%AC-%EC%8B%A4%ED%96%89-%EB%B0%8F-%EA%B6%8C%ED%95%9C-%ED%99%95%EC%9D%B8/","summary":"\u003chr\u003e\n\u003cp\u003e태스크가 정상적으로 발행됐다면, 태스크를 \u003cstrong\u003e실행(Execution)\u003c/strong\u003e 할 수 있습니다.\u003c/p\u003e\n\u003cp\u003e태스크가 실행되면 실행 인스턴스가 만들어지고, 실행 인스턴스별로 \u003cu\u003e실행 ID\u003c/u\u003e를 부여받게 됩니다.\u003c/p\u003e\n\u003cbr\u003e\n\u003ch3 id=\"태스크-실행\"\u003e태스크 실행\u003c/h3\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cspan\u003e\u003cinline style=\"color:#ff4500\"\u003eopmate execution run\u003c/inline\u003e으로 이전 단계에서 발행한 태스크를 실행할 수 있습니다.\u003c/span\u003e\u003c/p\u003e","tags":[],"title":"5. 태스크 실행 및 권한 확인"},{"content":" OPMATE는 태스크 구성 및 실행을 위해 필요한 파일 다운로드 \u0026amp; 업로드 기능을 지원합니다.\n이 기능을 통해 특정 노드에 패치 파일을 배포하거나, 반대로 태스크 실행 결과 파일을 사용자 환경으로 가져올 수도 있습니다.\n주 사용법은 다음과 같습니다:\nCLI, WebConsole → Master\n설치, 패치 등에 필요한 파일을 Master 서버로 업로드합니다. Master → Agent\nMaster 서버에 업로드된 파일을 Agent가 설치된 서버로 다운로드합니다. Agent → Master\nAgent가 설치된 서버에서 생성된 파일을 Master 서버로 업로드합니다. Master → CLI, WebConsole\nMaster 서버에 업로드된 파일을 사용자 환경으로 다운로드합니다. 파일허브 파일허브(Filehub)는 파일 송수신을 위한 임시 보관소입니다. Master 서버로 업로드된 모든 파일은 지정된 파일허브 디렉터리에 저장됩니다.\n파일허브는 CLI, WebConsole에서 생성 및 관리할 수 있으며, 파일허브 ID로 구분됩니다. CLI 명령어 OPMATE CLI의 file 명령어로 사용자 환경에서 파일허브에 있는 파일에 접근할 수 있습니다. file list, file get, file put, file delete 총 4가지 명령어가 있습니다:\n## 파일 업로드 $ opmate file put -rp master:/myfilehub/a.txt -lp /tmp/a.txt ## 파일 조회 $ opmate file list -rp master:/myfilehub/ ## 파일 다운로드 $ opmate file get -rp master:/myfilehub/a.txt -lp /tmp/a.txt -ow ## 파일 삭제 $ opmate file delete -rp master:/myfilehub/a.txt\rCLI 명령어를 활용하려면 현재 로그인된 사용자가 파일허브 권한을 가지고 있어야 합니다.\n또한 filehub 명령어를 통해 파일허브를 생성하거나 관리할 수 있습니다:\n$ opmate filehub --help ... actions: list 파일 허브 목록 출력 view 파일 허브 상세 출력 create 파일 허브 생성 edit 파일 허브 수정 delete 파일 허브 삭제 addperm 퍼미션 추가 rmperm 퍼미션 제거\r스크립트 예약어 태스크 스크립트 작성 시 예약어로 스크립트 단에서 파일 관련 기능을 활용할 수 있습니다.\n이를 통해 스크립트에서 파일허브를 일종의 원격 디렉터리로 활용할 수 있습니다.\nFILE_PUT, FILE_GET, FILE_LS 총 3가지 예약어가 있습니다:\nFILE_LS : 파일 조회 Usage : @OPM_ATTR.FILE_LS@ \u0026lt;master:/master-directory-path\u0026gt; [glob] Example : @OPM_ATTR.FILE_LS@ master:/myfilehub/textfile/ \u0026#34;*.txt\u0026#34;\rFILE_PUT : 파일허브로 파일 업로드 Usage : @OPM_ATTR.FILE_PUT@ [–-overwrite] \u0026lt;master:/filehub-id/master-file-path\u0026gt; \u0026lt;local-file-path\u0026gt; Example : @OPM_ATTR.FILE_PUT@ --overwrite master:/myfilehub/tomcat.tar.gz /tmp/tomcat.tar.gz\rFILE_GET : 파일허브에서 파일 다운로드 Usage : @OPM_ATTR.FILE_GET@ [–-overwrite] \u0026lt;master:/filehub-id/master-file-path\u0026gt; \u0026lt;local-file-path\u0026gt; Example : @OPM_ATTR.FILE_GET@ --overwrite master:/myfilehub/hostname/passwd /etc/passwd 스크립트 예약어를 사용하려면 반드시 스크립트를 실행하는 태스크가 파일허브 권한을 가지고 있어야 합니다.\nCLI 튜토리얼 : 파일 다운로드 \u0026amp; 업로드 다음과 같이 간단한 튜토리얼을 통해 파일 다운로드 업로드 과정을 학습해봅니다:\n파일허브 생성 및 권한 부여\n파일 배포 (CLI → Master → Agent)\n파일 수집 (Agent → Master → CLI) 1. 파일허브 생성 및 권한 부여 OPMATE CLI에 로그인한 후, filehub create로 myfilehub란 이름의 파일허브를 생성합니다.\n$ opmate filehub create -id myfilehub myfilehub has been created successfully.\r이제 생성한 파일허브를 filehub view로 조회해 보겠습니다:\n$ opmate filehub view -id myfilehub +------------+------------------------------------+ | FIELD | VALUE | +------------+------------------------------------+ | ID | myfilehub | | OWNER | gildong | | CREATED | 2024-01-01 09:00:00 UTC BY gildong | | UPDATED | 2024-01-01 09:00:00 UTC BY gildong | +------------+------------------------------------+ | PERMISSION | | +------------+------------------------------------+\rowner가 태스크 생성자인 gildong으로 설정된 걸 확인할 수 있습니다. gildong은 파일허브의 소유자이므로 별도의 권한 설정 없이 파일허브 내의 모든 파일에 대한 권한을 가집니다.\n다른 유저에게도 권한을 부여하고 싶다면 filehub addperm 명령어를 통해 파일허브 권한 목록을 업데이트해야 합니다. 2. 파일 배포 (CLI → Master → Agent) 간단한 텍스트 파일을 현재 디렉터리에 생성한 후, 이를 파일허브에 전송해 보겠습니다.\n이 후 해당 파일을 타겟 노드에 배포해 보겠습니다.\n우선 a.txt란 텍스트 파일을 생성합니다:\n$ vi a.txt \u0026gt; i love opmate\r이 후 file put 명령어를 사용하여 텍스트 파일을 myfilehub 파일허브에 업로드합니다.\n파일을 업로드할 디렉터리는 master:/myfilehub/textfile/a.txt 입니다.\n여기서 'master:/myfilehub'는 파일허브 자체의 디렉터리고, 'textfile'은 파일 허브 상의 하위 디렉터리며, 없을 시 자동으로 생성됩니다.\n$ opmate file put -lp a.txt -rp master:/myfilehub/textfile/a.txt ... checksum success\rlp 파라미터는 전송할 파일의 로컬 파일 디렉터리를 지정하며,\nrp 파라미터는 파일이 저장되는 myfilehub 파일허브 상의 파일 디렉터리를 지정합니다.\n파일이 정상적으로 전송되었다면 우선 file list 명령어를 통해 myfilehub 파일허브의 루트 디렉터리를 조회합니다:\n$ opmate file list -rp master:/myfilehub +----------+------+-------------------------+-----------+-----------+ | NAME | SIZE | DATE | TYPE | VALID_DAY | +----------+------+-------------------------+-----------+-----------+ | textfile | 19 | 2024-01-01 09:30:00 KST | directory | 0 | +----------+------+-------------------------+-----------+-----------+ ROW COUNT : 1/1\rmyfilehub의 루트 디렉터리에 textfile이라는 하위 디렉터리가 생성되었습니다.\n이제 myfilehub/textfile을 조회해 보겠습니다:\n$ opmate fi list -rp master:/myfilehub/textfile +-------+------+-------------------------+------+-----------+ | NAME | SIZE | DATE | TYPE | VALID_DAY | +-------+------+-------------------------+------+-----------+ | a.txt | 15 | 2024-01-01 09:30:00 KST | file | 13 | +-------+------+-------------------------+------+-----------+ ROW COUNT : 1/1\ra.txt 파일이 정상적으로 업로드되었습니다.\n이제 파일허브에 업로드된 a.txt를 타겟 노드로 배포해 보겠습니다.\n타겟 노드로의 파일 전송은 Master와 Agent 간의 통신을 통해 이루어지며,\nOPMATE 태스크의 스크립트를 사용하여 수행할 수 있습니다.\n먼저 태스크 생성에 필요한 TDF 파일과 스크립트 파일을 작성합니다.\nTDF 파일은 사용자 환경에 맞게 설정을 변경합니다. (ex. script-account, node-set 등)\n$ vi textupload.tdf --- id: textupload owner: gildong # 현재 유저명로 변경 script-account: root # Shell을 실행하는 OS 계정명으로 변경 description: \u0026#34;Text Upload\u0026#34; publisher: gildong # 현재 유저명으로 변경 target: - node-set: OS-TYPE:\u0026#34;^Linux$\u0026#34; # Node-set을 현재 연결된 노드에 따라 변경 account: root description: OS가 Linux인 모든 노드 대상으로 태스크 실행 ...\r$ vi textupload.sh #!/bin/sh ## 파일 다운로드 @OPM_ATTR.FILE_GET@ --overwrite master:/myfilehub/textfile/a.txt /tmp/a.txt ## 파일 내용 출력 cat /tmp/a.txt\r이 후 생성한 파일을 토대로 태스크를 생성합니다.\n태스크 생성과 실행에 관해선 Tutorial 4, Tutorial 5를 참고해 주세요.\n$ opmate task create -tf textupload.tdf -sf textupload.sh textupload has been created successfully.\r태스크 생성 후 해당 태스크에 myfilehub 파일허브에 대한 권한을 부여합니다.\n$ opmate filehub addperm -id myfilehub -ts textupload -mo rwx myfilehub has been modified successfully. $ opmate filehub view -id myfilehub +------------+------------------------------------+ | FIELD | VALUE | +------------+------------------------------------+ | ID | myfilehub | | OWNER | gildong | | CREATED | 2024-01-01 14:00:00 KST BY gildong | | UPDATED | 2024-01-01 14:00:00 KST BY gildong | +------------+------------------------------------+ | PERMISSION | textupload(task) : rwx | +------------+------------------------------------+\r여기서 유의할 점은 스크립트에서 파일 관련 예약어를 사용할 때 파일허브 권한이 필요한 대상은 유저 gildong이 아니라 태스크 textupload입니다. 이는 파일 전송의 주체가 태스크를 실행하는 Agent이기 때문입니다.\n이후 태스크를 배포하고, 실행합니다. 만약 Role이 부여되지 않았다면, 현재 유저에게 Role을 부여하거나 Node-set을 변경하여 태스크를 실행할 수 있습니다.\n$ opmate task publish -id textupload ... textupload has been published successfully. $ opmate execute run -ts textupload ... execution #1 has been created successfully.\r이제 태스크 실행 결과를 확인합니다. Execution ID와 Node Session ID를 적절히 합니다.\n$ opmate execution listnode -id 1 +------------------------------+------------+-------------+--------+--------+ | NODE-SESSION-ID | HOSTNAME | REMOTE-ADDR | STATUS | RESULT | +------------------------------+------------+-------------+--------+--------+ | 635df610-fd46-4c6a-b9ae-78c4 | opmate-dev | 123.0.0.1 | comple | succes | | 92c00147 | | | ted | s | | 10ca6b2e-ee06-48f1-a5eb-236f | opmate-db | 123.0.0.2 | comple | succes | | 4c5b2aac | | | ted | s | +------------------------------+------------+-------------+--------+--------+ ROW COUNT : 2/2 $ opmate execution viewnode -id 1 -nd 635df610-fd46-4c6a-b9ae-78c492c00147 +-----------------+--------------------------------------+ | FIELD | VALUE | +-----------------+--------------------------------------+ | NODE-SESSION-ID | 635df610-fd46-4c6a-b9ae-78c492c00147 | | HOSTNAME | opmate-dev | | REMOTE-ADDRESS | 123.0.0.1 | | ACCOUNT | root | | STATUS | completed | | RESULT | success | | EXIT-NUM | 0 | | FORCE-STOP | n/a | | START-DATE | 2024-01-01 15:00:00 KST | | END-DATE | 2024-01-01 15:00:00 KST | +-----------------+--------------------------------------+ [STDOUT] i love opmate. [STDERR] No content.\ra.txt가 전송되어 STDOUT으로 파일 내용이 출력됩니다: i love opmate.\n3. 파일 수집 (Agent → Master → CLI) 각 노드에서 /etc/passwd 파일을 개별적으로 수집해 저장해 보겠습니다.\n우선 이전 단계와 비슷한 과정으로 먼저 TDF 파일과 스크립트 파일을 작성합니다.\n$ vi passwdcollect.tdf --- id: datacollect owner: gildong # 현재 유저명로 변경 script-account: root # Shell을 실행하는 OS 계정명으로 변경 description: \u0026#34;Collect /etc/passwd from Node-set\u0026#34; publisher: gildong # 현재 유저명으로 변경 target: - node-set: OS-TYPE:\u0026#34;^Linux$\u0026#34; # Node-set을 현재 연결된 노드에 따라 변경 account: root description: OS가 Linux인 모든 노드 대상으로 태스크 실행 ...\r$ vi passwdcollect.sh #!/bin/sh subdir=$(hostname) ## 각 노드의 /etc/passwd 파일을 /myfilehub/$hostname/passwd 로 복사 @OPM_ATTR.FILE_PUT@ --overwrite master:/myfilehub/$subdir/passwd /etc/passwd\r해당 스크립트는 타겟 노드의 호스트명을 하위 디렉터리로 하여 /etc/passwd 파일을 저장합니다.\n이 후 TDF, 스크립트 파일을 기반으로 해당 태스크를 생성, 배포, 실행합니다. 과정 중간에 passwdcollect 태스크에 파일허브에 대한 권한 또한 부여합니다.\n$ opmate task create -tf passwdcollect.tdf -sf passwdcollect.sh passwdcollect has been created successfully.\r$ opmate filehub addperm -id myfilehub -ts passwdcollect -mo rwx myfilehub has been modified successfully.\r$ opmate task publish -id passwdcollect ... passwdcollect has been published successfully.\r$ opmate execute run -ts passwdcollect ... execution #2 has been created successfully.\r태스크 실행까지 마치면 myfilehub 파일허브를 다시 조회해봅니다.\n$ opmate file list -rp master:/myfilehub/ +-----------------+------+-------------------------+-----------+-----------+ | NAME | SIZE | DATE | TYPE | VALID_DAY | +-----------------+------+-------------------------+-----------+-----------+ | opmate-dev | 20 | 2024-01-01 20:00:00 KST | directory | 0 | | opmate-db | 20 | 2024-01-01 20:00:00 KST | directory | 0 | +-----------------+------+-------------------------+-----------+-----------+ ROW COUNT : 2/2\r타겟 노드인 opmate-dev와 opmate-dev 이름으로 두 개의 디렉터리가 생성된 것을 확인할 수 있습니다.\n이 중 opmate-dev 디렉터리를 확인해보면\n$ opmate file list -rp master:/myfilehub/opmate-dev +--------+------+-------------------------+------+-----------+ | NAME | SIZE | DATE | TYPE | VALID_DAY | +--------+------+-------------------------+------+-----------+ | passwd | 2113 | 2024-01-01 20:00:00 KST | file | 13 | +--------+------+-------------------------+------+-----------+ ROW COUNT : 1/1\ropmate-dev 노드의 /etc/passwd 파일이 정상적으로 업로드된 것을 확인할 수 있습니다.\n해당 파일을 file get 명령어로 사용자 환경으로 다운로드해 보겠습니다.\n$ opmate file get -lp /tmp/passwd -rp master:/myfilehub/opmate-dev/passwd ... checksum success $ cat /tmp/passwd root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin ...\rpasswd 파일이 정상적으로 다운로드되었습니다.\n이전페이지 / 목차 /\n","date":"0001-01-01","id":13,"permalink":"/docs/v2.0/tutorial/6.-%ED%8C%8C%EC%9D%BC-%EC%A0%84%EC%86%A1/","summary":"\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eOPMATE\u003c/strong\u003e는 태스크 구성 및 실행을 위해 필요한 \u003cstrong\u003e\u003cu\u003e파일 다운로드 \u0026amp; 업로드\u003c/u\u003e\u003c/strong\u003e 기능을 지원합니다.\u003c/p\u003e\n\u003cp\u003e이 기능을 통해 특정 노드에 패치 파일을 배포하거나, 반대로 태스크 실행 결과 파일을 사용자 환경으로 가져올 수도 있습니다.\u003c/p\u003e","tags":[],"title":"6. 파일 전송"},{"content":"","date":"0001-01-01","id":14,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":15,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":16,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"},{"content":"OPMATE CLI Tutorial Tutorial 1 : CLI 명령어\nTutorial 2 : 사용자 로그인\nTutorial 3 : 노드 조회\nTutorial 4 : 태스크 생성\nTutorial 5 : 태스크 실행 및 권한 확인\nTutorial 6 : 파일 전송\n","date":"0001-01-01","id":17,"permalink":"/docs/v2.0/tutorial/","summary":"\u003ch2 id=\"opmate-cli-tutorial\"\u003eOPMATE CLI Tutorial\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"tutorial1\"\u003eTutorial 1 : CLI 명령어\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"tutorial2\"\u003eTutorial 2 : 사용자 로그인\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"tutorial3\"\u003eTutorial 3 : 노드 조회\u003c/a\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"tutorial4\"\u003eTutorial 4 : 태스크 생성\u003c/a\u003e\u003c/p\u003e","tags":[],"title":"사용자 튜토리얼"}]